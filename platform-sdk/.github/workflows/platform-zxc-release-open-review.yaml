##
# Copyright (C) 2022-2023 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "Z-Platform XC: Release OSS Code"
on:
  workflow_call:
    inputs:
      repository:
        description: "Open Source Repository:"
        type: string
        required: true
      branch-ref:
        description: "Open Source Branch:"
        type: string
        required: true
      new-version:
        description: "New Release Version (ie. 0.30.0):"
        type: string
        required: true
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "17.0.3"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"
      custom-job-label:
        description: "Custom Job Label:"
        type: string
        required: false
        default: "Release"

    secrets:
      access-token:
        description: "The Github access token used to checkout the repository, submodules, and make GitHub API calls."
        required: true
      gpg-key-contents:
        required: false
      gpg-key-passphrase:
        required: false
      git-user-name:
        required: false
      git-user-email:
        required: false


defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: write

jobs:
  release:
    name: ${{ inputs.custom-job-label || 'Release' }}
    runs-on: [self-hosted, Linux, medium, ephemeral]
    steps:
      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Validate Workflow Inputs
        id: validate-workflow
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME="${BRANCH_NAME##origin/}"

          if [[ ! "${BRANCH_NAME}" =~ ^main$|^master$|^release-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            printf "::error title=Branch Error::The version policy of %s only allows this workflow to be executed on branches matching the pattern: %s" "${POLICY}" '^main$|^master$|^release-[0-9]+\.[0-9]+\.[0-9]+$'
            exit 32
          fi

          NEW_VERSION="${{ inputs.new-version }}"
          VALID_VERSION="$(semver validate "${NEW_VERSION}")"

          if [[ "${VALID_VERSION}" != "valid" ]]; then
            echo "::error title=Version Error::The supplied new-version parameter (${NEW_VERSION}) is invalid and does not conform to the semantic versioning specifications."
            exit 2
          fi

          PRERELEASE="$(semver get prerel "${NEW_VERSION}")"

          if [[ -z "${PRERELEASE}" ]]; then
            echo "::error title=Version Error::The supplied new-version parameter (${NEW_VERSION}) is NOT a PRERELEASE version and is not supported by this pipeline."
            exit 8
          fi

          BUILD="$(semver get build "${NEW_VERSION}")"

          if [[ -n "${BUILD}" ]]; then
            echo "::error title=Version Error::The supplied new-version parameter (${NEW_VERSION}) contains a BUILD specification and is not supported by this pipeline."
            exit 12
          fi

      - name: Install GnuPG Tools
        if: ${{ inputs.dry-run-enabled != true }}
        run: |
          if ! command -v gpg2 >/dev/null 2>&1; then
            echo "::group::Updating APT Repository Indices"
              sudo apt update
            echo "::endgroup::"
            echo "::group::Installing GnuPG Tools"
              sudo apt install -y gnupg2
            echo "::endgroup::"
          fi

      - name: Import GPG key
        id: gpg_key
        uses: crazy-max/ghaction-import-gpg@v5
        if: ${{ inputs.dry-run-enabled != true }}
        with:
          gpg_private_key: ${{ secrets.gpg-key-contents }}
          passphrase: ${{ secrets.gpg-key-passphrase }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          gradle-home-cache-strict-match: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            dependency-check-data

      - name: Checkout Platform SDK Code
        uses: actions/checkout@v3
        with:
          path: platform

      - name: Checkout Open Source Code
        uses: actions/checkout@v3
        with:
          path: open-review
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch-ref }}
          token: ${{ secrets.access-token }}

      - name: Synchronize Code to Open Source
        run: rsync -rvElptogz --delete --exclude=".git/" "${{ github.workspace }}/platform/" "${{ github.workspace }}/open-review/"

      - name: Redact Open Source Protected Directories
        working-directory: ${{ github.workspace }}/open-review
        run: |
          cp -rvf ".github/workflows/support/docs/apache2/README.md" .
          cp -rvf ".github/workflows/support/license/apache2/LICENSE" .
          cp -rvf "sdk/docs/acknowledgments.html" .
          rm -rvf "regression" || true
          rm -rvf "platform-apps" || true
          rm -rvf "docs" || true
          rm -rvf "archive" || true
          rm -rvf "swirlds" || true
          rm -rvf ".idea" || true
          rm -rvf ".circleci" || true
          rm -rvf ".circleci.settings.xml" || true
          rm -rvf "swirlds-benchmarks" || true
          rm -rvf "swirlds-unit-tests/common/swirlds-logging-test" || true
          rm -rvf "swirlds-unit-tests/core" || true
          rm -rvf "swirlds-unit-tests/structures" || true
          rm -rvf "test-data" || true
          rm -rvf "changelog.md" || true
          rm -rvf ".gitmodules" || true
          rm -rvf "swirlds-platform-core/src/test" || true
          rm -rvf "swirlds-fchashmap/src/test" || true
          rm -rvf "swirlds-jasperdb/src/test" || true
          rm -rvf "swirlds-virtualmap/src/test" || true
          rm -rvf "sdk/data/lifecycle" || true
          rm -rvf "sdk/kernels" || true
          rm -rvf "sdk/testing" || true
          rm -rvf "sdk/test_cases.sh" || true
          rm -rvf "sdk/data/configs" || true
          rm -rvf "sdk/docs" || true
          rm -rvf "sdk/README.txt" || true
          rm -rvf "jdk.version" || true
          rm -rvf "LICENSE.md" || true

          find . -iregex ".*/.*\.iml" -exec rm -vf "{}" \;

      - name: Alter Open Source Protected Files
        working-directory: ${{ github.workspace }}/open-review
        run: |
          cat "sdk/config.txt" | \
          perl -0777 -pe 's/# \*\* BEGIN REMOVE FROM SDK RELEASES \*\*.*# \*\* END REMOVE FROM SDK RELEASES \*\*//igs' > "sdk/config.txt.temp"

          rm -f "sdk/config.txt"
          mv "sdk/config.txt.temp" "sdk/config.txt"

          sed -i -e 's/spotlessSetLicenseHeaderYearsFromGitHistory/# spotlessSetLicenseHeaderYearsFromGitHistory/g' gradle.properties
          sed -i -e 's/non-sealed abstract class/abstract non-sealed class/g' "swirlds-common/src/main/java/com/swirlds/common/system/transaction/internal/ConsensusTransactionImpl.java"
          sed -i -e 's/ratchetFrom/\/\/ratchetFrom/g' "buildSrc/src/main/kotlin/com.swirlds.platform.spotless-conventions.gradle.kts"
          cat "swirlds-common/src/main/java/com/swirlds/common/system/transaction/internal/ConsensusTransactionImpl.java"

      - name: Gradle Version
        id: debug-gradle-version
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: --version
          build-root-directory: ${{ github.workspace }}/open-review

      - name: Gradle Spotless
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: spotlessApply --scan
          build-root-directory: ${{ github.workspace }}/open-review

      - name: Remove CI Tools
        working-directory: ${{ github.workspace }}/open-review
        run: rm -rvf .github

      - name: Apply Version Number Update (Explicit)
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: versionAsSpecified --scan -PnewVersion=${{ inputs.new-version }}
          build-root-directory: ${{ github.workspace }}/open-review

      - name: Version Report
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: githubVersionSummary --scan
          build-root-directory: ${{ github.workspace }}/open-review

      - name: Gradle Assemble
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.dry-run-enabled != true }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: assemble --scan
          build-root-directory: ${{ github.workspace }}/open-review

      - name: Gradle JavaDoc
        id: gradle-javadoc
        uses: gradle/gradle-build-action@v2
        if: ${{ steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: javadoc --scan --parallel
          build-root-directory: ${{ github.workspace }}/open-review

      - name: Gradle Clean
        id: gradle-clean
        uses: gradle/gradle-build-action@v2
        if: ${{ steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: clean --scan
          build-root-directory: ${{ github.workspace }}/open-review

      - name: Commit Version Changes
        id: commit
        uses: EndBug/add-and-commit@v9
        if: ${{ inputs.dry-run-enabled != true }}
        with:
          cwd: ./open-review
          author_name: ${{ secrets.git-user-name }}
          author_email: ${{ secrets.git-user-email }}
          commit: --signoff --gpg-sign
          message: "OSS Release v${{ inputs.new-version }}"
