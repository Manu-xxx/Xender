package com.hedera.services.config;
/*-
 * ‌
 * Hedera Services Node
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import com.google.protobuf.ByteString;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.ThreadContext;
import org.apache.logging.log4j.core.LoggerContext;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class Log4JExploitTest {
	private static final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	private static final PrintStream originalOut = System.out;

	@BeforeAll
	public static void setUpStreams() {
		System.setOut(new PrintStream(outContent));
	}

	@AfterAll
	public static void restoreStreams() {
		System.setOut(originalOut);
	}

	@ParameterizedTest
	@CsvSource({
			"configuration/mainnet/log4j2.xml, false, false, false",
			"configuration/testnet/log4j2.xml, false, false, false",
			"configuration/previewnet/log4j2.xml, false, false, false",
			"configuration/preprod/log4j2.xml, false, false, false",
			"configuration/dev/log4j2.xml, false, false, false",
			"configuration/compose/log4j2.xml, false, false, false",
			"src/test/resources/log4j2-WithMDC-test.xml, true, false, false",
			"src/test/resources/log4j2-test.xml, false, true, true",
			"src/test/resources/log4j2-test.xml, false, true, false"
	})
	void testLog4jExploit(
			final String configPath,
			final boolean lookForFishTagging,
			final boolean expectJndiLookup,
			final boolean encodeGrpcBeforeLogging) {
		final var series = "3PO-series";
		final var userName = "C3PO";
		final var malUri_toFailLookUp = "${jndi:https://previewnet.mirrornode.hedera.com/api/v1/accounts?account.id=0.0.90}";
		final var bio = "I am C-3PO, human-cyborg relations. " + malUri_toFailLookUp;
		final var expectedLog = "We are doomed" + malUri_toFailLookUp;
		final var expectedMDCFishTags = "[" + series + "] " + "[" + userName + "] " + "[" + bio + "]";
		final var stackStraceSample = "at org.apache.logging.log4j.core.net.JndiManager.lookup";


		LoggerContext context = (LoggerContext) LogManager.getContext(false);
		File file = new File(configPath);
		context.setConfigLocation(file.toURI());

		ThreadContext.put("series", series);
		ThreadContext.put("username", userName);
		ThreadContext.put("bio", bio);

		final var toLog = encodeGrpcBeforeLogging ?
				helper(ByteString.copyFromUtf8(expectedLog)) :
				expectedLog;
		LogManager.getLogger().warn(toLog);

		ThreadContext.clearMap();

		final var actualLog = outContent.toString();

		assertTrue(actualLog.contains(expectedLog));

		// validate that fish tags are generated when configured for.
		if (lookForFishTagging) {
			assertTrue(actualLog.contains(expectedMDCFishTags));
		}

		// the log should contain the jndi lookup stack trace if the log4J is configured to be exploited.
		if (!expectJndiLookup || encodeGrpcBeforeLogging) {
			assertFalse(actualLog.contains(stackStraceSample), actualLog);
		} else {
			// should expect jndi lookup log4J versions 2.14 and below
//			assertTrue(actualLog.contains(stackStraceSample));

			// with log4J versions 2.15 and above this jndi lookup is fixed.
			assertFalse(actualLog.contains(stackStraceSample));
		}
	}

	private String helper(ByteString bs) {
		StringBuilder builder = new StringBuilder(bs.size());

		for(int i = 0; i < bs.size(); ++i) {
			byte b = bs.byteAt(i);
			switch(b) {
				case 7:
					builder.append("\\a");
					break;
				case 8:
					builder.append("\\b");
					break;
				case 9:
					builder.append("\\t");
					break;
				case 10:
					builder.append("\\n");
					break;
				case 11:
					builder.append("\\v");
					break;
				case 12:
					builder.append("\\f");
					break;
				case 13:
					builder.append("\\r");
					break;
				case 34:
					builder.append("\\\"");
					break;
				case 39:
					builder.append("\\'");
					break;
				case 36:
				case 58:
				case 92:
					builder.append("\\\\");
					break;
				default:
					if (b >= 32 && b <= 126) {
						builder.append((char)b);
					} else {
						builder.append('\\');
						builder.append((char)(48 + (b >>> 6 & 3)));
						builder.append((char)(48 + (b >>> 3 & 7)));
						builder.append((char)(48 + (b & 7)));
					}
			}
		}

		return builder.toString();
	}
}
