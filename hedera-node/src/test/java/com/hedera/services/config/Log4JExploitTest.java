package com.hedera.services.config;

import com.hedera.test.extensions.LogCaptor;
import com.hedera.test.extensions.LogCaptureExtension;
import com.hedera.test.extensions.LoggingSubject;
import com.hedera.test.extensions.LoggingTarget;
import org.apache.logging.log4j.status.StatusLogger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith({ LogCaptureExtension.class })
class Log4JExploitTest {
	@LoggingTarget
	private LogCaptor logCaptor;

	@LoggingSubject
	private TestClassWithLogger subject = new TestClassWithLogger();

	// toggle the no look up pattern by un/commenting the following boolean.
	private Boolean noLookUpExploit;

	@Test
	void testLog4jExploit() {
		final var malUri_toFailLookUp = "${jndi:https://previewnet.mirrornode.hedera.com/api/v1/accounts?account.id=0.0.90}";
		final var expectedLog = "Weâ€™re doomed. " + malUri_toFailLookUp;
		subject.testLogger(malUri_toFailLookUp);

		final var logs = logCaptor.warnLogs();

		// Test if the jndi lookup activated and failed because of bad naming.
		final var statusLogs = StatusLogger.getLogger().getStatusData();

		// not important.
		assertEquals(1, logs.size());
		assertEquals(expectedLog, logs.get(0));

		// important when {nolookups} is not set. These will fail in the other setup.
		assertFalse(statusLogs.isEmpty());
		final var message = statusLogs.get(0).getThrowable().getMessage();
		assertTrue(message.contains("Need to specify class name in environment or system property"));
	}
}
