/*
 * Copyright (C) 2022 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.hedera.node.app.spi.state;

import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.Nullable;
import java.io.DataOutput;
import java.io.IOException;

/**
 * Describes a method for writing an object into some binary form.
 *
 * <p>When using a {@link ReadableState} or {@link WritableState}, it is advisable to use natural
 * types and business objects as the keys and values. For example, you may use {@code Long} as the
 * key and {@code Account} as the value of a state. This makes the code very simple to implement,
 * understand, and test. However, every key and value stored in the system must be serializable to a
 * form that can be used both for storage and for hashing. The {@link Parser} and the {@link Writer}
 * parse from bytes and write into bytes, respectively.
 *
 * <p>Typically, a concrete implementation of this interface is not created. Instead, use one of the
 * static writer methods generated by the PBJ (protobuf for java) library.
 *
 * @param <T> The type of object to be written
 */
@FunctionalInterface
public interface Writer<T> {
    /**
     * Writes an item to the given {@link DataOutput}.
     *
     * @param item The item to write. Must not be null.
     * @param output The {@link DataOutput} to write to.
     * @throws IOException If the {@link DataOutput} cannot be written to.
     */
    void write(@Nullable T item, @NonNull DataOutput output) throws IOException;
}
