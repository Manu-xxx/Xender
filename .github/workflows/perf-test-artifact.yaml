##
# Copyright (C) 2022-2023 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "Generate Artifact for Performance Test"
on:
  workflow_call:
    inputs:
      # Valid version policies are as follows: specified, branch-commit, adhoc-commit
      version-policy:
        description: "Version Policy:"
        type: string
        required: true
      # Valid options are none, integration, and preview
      trigger-env-deploy:
        description: "Deploy to Environment:"
        type: string
        required: true
        default: "none"
      # Valid SDK release profiles are as follows:
      # - none
      # - AdhocCommit
      # - DevelopCommit
      # - DevelopDailySnapshot
      # - DevelopSnapshot
      # - PrereleaseChannel
      sdk-release-profile:
        description: "SDK Release Profile:"
        type: string
        required: true
        default: "none"
      new-version:
        description: "New Version:"
        type: string
        required: false
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "17.0.8"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"

    secrets:
      access-token:
        required: true
      bucket-name:
        required: true
      cdn-bucket-name:
        required: true
      svcs-ossrh-username:
        required: true
      svcs-ossrh-password:
        required: true
      svcs-gpg-key-contents:
        required: true
      svcs-gpg-key-passphrase:
        required: true
      sdk-ossrh-username:
        required: true
      sdk-ossrh-password:
        required: true
      sdk-gpg-key-contents:
        required: true
      sdk-gpg-key-passphrase:
        required: true
      slack-webhook-url:
        required: true
      jenkins-integration-url:
        required: false
    outputs:
      build-version:
        description: "The build artifact version"
        value: ${{ jobs.build-artifact.outputs.build-version }}

defaults:
  run:
    shell: bash

env:
  LC_ALL: C.UTF-8

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate
    runs-on: [ self-hosted, Linux, large, ephemeral ]
    outputs:
      branch-name: ${{ steps.parameters.outputs.branch-name }}
      branch-name-lower: ${{ steps.parameters.outputs.branch-name-lower }}
      branch-name-safe: ${{ steps.parameters.outputs.branch-name-safe }}
      commit-prefix: ${{ steps.parameters.outputs.commit-prefix }}
      commit-id: ${{ steps.parameters.outputs.commit-id }}
      commit-id-short: ${{ steps.parameters.outputs.commit-id-short }}
      version: ${{ steps.effective-version.outputs.number }}
      version-prefix: ${{ steps.effective-version.outputs.prefix }}
      prerelease: ${{ steps.effective-version.outputs.prerelease }}
    steps:
#      - name: Install Semantic Version Tools
#        run: |
#          echo "::group::Download SemVer Binary"
#          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
#          echo "::endgroup::"
#          echo "::group::Change SemVer Binary Permissions"
#          sudo chmod -v +x /usr/local/bin/semver
#          echo "::endgroup::"
#          echo "::group::Show SemVer Binary Version Info"
#          semver --version
#          echo "::endgroup::"

      - name: Verify Workflow Parameters
        id: parameters
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME="${BRANCH_NAME##origin/}"
          BRANCH_NAME_LOWER="$(echo "${BRANCH_NAME}" | tr '[:upper:]' '[:lower:]')"
          BRANCH_NAME_SAFE="$(echo "${BRANCH_NAME_LOWER}" | tr '/' '-' | tr '_' '.')"

#          COMMIT_PREFIX="adhoc"
#          [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && COMMIT_PREFIX="${BRANCH_NAME_SAFE}"

#          echo "branch-name=${BRANCH_NAME}" >>"${GITHUB_OUTPUT}"
          echo "branch-name-lower=${BRANCH_NAME_LOWER}" >>"${GITHUB_OUTPUT}"
#          echo "branch-name-safe=${BRANCH_NAME_SAFE}" >>"${GITHUB_OUTPUT}"
#          echo "commit-prefix=${COMMIT_PREFIX}" >>"${GITHUB_OUTPUT}"
#          echo "commit-id=${{ github.sha }}" >>"${GITHUB_OUTPUT}"
          echo "commit-id-short=$(echo "${{ github.sha }}" | cut -c1-8)" >>"${GITHUB_OUTPUT}"

#      - name: Verify Version Update (As Specified)
#        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
#        run: |
#          VALID_VERSION="$(semver validate "${{ inputs.new-version }}")"
#
#          if [[ "${VALID_VERSION}" != "valid" ]]; then
#            echo "::error title=Version Error::The supplied new-version parameter (${{ inputs.new-version }}) is invalid and does not conform to the semantic versioning specifications."
#            exit 2
#          fi

#      - name: Checkout Code
#        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
#
#      - name: Setup Java
#        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
#        with:
#          distribution: ${{ inputs.java-distribution }}
#          java-version: ${{ inputs.java-version }}
#
#      - name: Setup Gradle
#        uses: gradle/gradle-build-action@842c587ad8aa4c68eeba24c396e15af4c2e9f30a # v2.9.0
#        with:
#          gradle-version: ${{ inputs.gradle-version }}
#
#      - name: Gradle Update Version (As Specified)
#        uses: gradle/gradle-build-action@842c587ad8aa4c68eeba24c396e15af4c2e9f30a # v2.9.0
#        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
#        with:
#          gradle-version: ${{ inputs.gradle-version }}
#          arguments: versionAsSpecified -PnewVersion=${{ inputs.new-version }} --scan
#
#      - name: Gradle Update Version (Branch Commit)
#        uses: gradle/gradle-build-action@842c587ad8aa4c68eeba24c396e15af4c2e9f30a # v2.9.0
#        if: ${{ inputs.version-policy != 'specified' && !cancelled() && !failure() }}
#        with:
#          gradle-version: ${{ inputs.gradle-version }}
#          arguments: versionAsPrefixedCommit -PcommitPrefix=${{ steps.parameters.outputs.commit-prefix }} --scan
#
#      - name: Compute Final Effective Version
#        id: effective-version
#        run: |
#          EFF_VERSION="$(./gradlew showVersion --quiet | tr -d '[:space:]')"
#          PRERELEASE_SUFFIX="$(semver get prerel "${EFF_VERSION}")"
#          PRERELEASE="false"
#          [[ -n "${PRERELEASE_SUFFIX}" ]] && PRERELEASE="true"
#
#          MAJOR_VERSION="$(semver get major "${EFF_VERSION}")"
#          MINOR_VERSION="$(semver get minor "${EFF_VERSION}")"
#
#          echo "number=${EFF_VERSION}" >>"${GITHUB_OUTPUT}"
#          echo "prefix=${MAJOR_VERSION}.${MINOR_VERSION}" >>"${GITHUB_OUTPUT}"
#          echo "prerelease=${PRERELEASE}" >>"${GITHUB_OUTPUT}"

#      - name: Cache Build Version
#        uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
#        with:
#          path: version.txt
#          key: node-build-version-${{ steps.effective-version.outputs.number }}-${{ github.sha }}

  build-artifact:
    name: Build Artifact
    runs-on: [self-hosted, Linux, large, ephemeral]
    needs:
      - validate
    outputs:
      build-version: ${{ steps.artifact-release.outputs.build-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 # v1.1.1
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "hedera-artifact-builds@devops-1-254919.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b # v1.1.1


      - name: Create Artifact Archive
        id: artifact-release
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          POLICY="${{ inputs.version-policy }}"
          ARTIFACT_BASE_DIR="${HOME}/artifact-release"
          mkdir -p "${ARTIFACT_BASE_DIR}"

          ARTIFACT_NAME="build-${{ needs.validate.outputs.branch-name-lower }}-${{ needs.validate.outputs.commit-id-short }}"


          ARTIFACT_FILE="${ARTIFACT_BASE_DIR}/${ARTIFACT_NAME}.zip"
          deterministic-zip -D -vr "${ARTIFACT_FILE}" *

          echo "build-version=${ARTIFACT_NAME}" >>"${GITHUB_OUTPUT}"
          echo "folder=${ARTIFACT_BASE_DIR}" >>"${GITHUB_OUTPUT}"
          echo "name=${ARTIFACT_NAME}" >>"${GITHUB_OUTPUT}"
          echo "file=${ARTIFACT_FILE}" >>"${GITHUB_OUTPUT}"

      - name: Check If Release Artifact Exist in Bucket
        id: check-if-exist
        run: |
          set +e
          ARTIFACT_NAME="build-v${{ needs.validate.outputs.version }}"
          ARTIFACT_PATH="gs://${{ secrets.bucket-name }}/${ARTIFACT_NAME}.zip"
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}"
          gsutil -q stat "${ARTIFACT_PATH}"
          PATH_EXIST=$?
          while loop check
          if [ ${PATH_EXIST} -eq 0 ]; then
            echo "Artifact Already Exist"
            echo "exist=true" >>"${GITHUB_OUTPUT}"
          else
            echo "Artifact Not Exist"
            echo "exist=false" >>"${GITHUB_OUTPUT}"
          fi
