##
# Copyright (C) 2022-2023 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXC: [Node] Build Release Artifact"
on:
  workflow_call:
    inputs:
      # Valid version policies are as follows: specified, branch-commit, adhoc-commit
      version-policy:
        description: "Version Policy:"
        type: string
        required: true
      # Valid options are none, integration, and preview
      trigger-env-deploy:
        description: "Deploy to Environment:"
        type: string
        required: true
        default: "none"
      new-version:
        description: "New Version:"
        type: string
        required: false
      dry-run-enabled:
        description: "Perform Dry Run"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "17.0.8"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"

    secrets:
      access-token:
        required: true
      bucket-name:
        required: true
      svcs-ossrh-username:
        required: true
      svcs-ossrh-password:
        required: true
      svcs-gpg-key-contents:
        required: true
      svcs-gpg-key-passphrase:
        required: true
      jenkins-integration-url:
        required: false

defaults:
  run:
    shell: bash

env:
  LC_ALL: C.UTF-8

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate
    runs-on: [ self-hosted, Linux, large, ephemeral ]
    outputs:
      branch-name: ${{ steps.parameters.outputs.branch-name }}
      branch-name-lower: ${{ steps.parameters.outputs.branch-name-lower }}
      branch-name-safe: ${{ steps.parameters.outputs.branch-name-safe }}
      commit-prefix: ${{ steps.parameters.outputs.commit-prefix }}
      commit-id: ${{ steps.parameters.outputs.commit-id }}
      commit-id-short: ${{ steps.parameters.outputs.commit-id-short }}
      version: ${{ steps.effective-version.outputs.number }}
    steps:
      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Verify Workflow Parameters
        id: parameters
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME="${BRANCH_NAME##origin/}"
          BRANCH_NAME_LOWER="$(echo "${BRANCH_NAME}" | tr '[:upper:]' '[:lower:]')"
          BRANCH_NAME_SAFE="$(echo "${BRANCH_NAME_LOWER}" | tr '/' '-' | tr '_' '.')"

          COMMIT_PREFIX="adhoc"
          [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && COMMIT_PREFIX="${BRANCH_NAME_SAFE}"

          echo "branch-name=${BRANCH_NAME}" >>"${GITHUB_OUTPUT}"
          echo "branch-name-lower=${BRANCH_NAME_LOWER}" >>"${GITHUB_OUTPUT}"
          echo "branch-name-safe=${BRANCH_NAME_SAFE}" >>"${GITHUB_OUTPUT}"
          echo "commit-prefix=${COMMIT_PREFIX}" >>"${GITHUB_OUTPUT}"
          echo "commit-id=${{ github.sha }}" >>"${GITHUB_OUTPUT}"
          echo "commit-id-short=$(echo "${{ github.sha }}" | cut -c1-8)" >>"${GITHUB_OUTPUT}"

      - name: Verify Version Update (As Specified)
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        run: |
          VALID_VERSION="$(semver validate "${{ inputs.new-version }}")"

          if [[ "${VALID_VERSION}" != "valid" ]]; then
            echo "::error title=Version Error::The supplied new-version parameter (${{ inputs.new-version }}) is invalid and does not conform to the semantic versioning specifications."
            exit 2
          fi

      - name: Checkout Code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Setup Java
        uses: actions/setup-java@cd89f46ac9d01407894225f350157564c9c7cee2 # v3.12.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        with:
          gradle-version: ${{ inputs.gradle-version }}

      - name: Gradle Update Version (As Specified)
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        if: ${{ inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: versionAsSpecified -PnewVersion=${{ inputs.new-version }} --scan

      - name: Gradle Update Version (Branch Commit)
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        if: ${{ inputs.version-policy != 'specified' && !cancelled() && !failure() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: versionAsPrefixedCommit -PcommitPrefix=${{ steps.parameters.outputs.commit-prefix }} --scan

      - name: Compute Final Effective Version
        id: effective-version
        run: |
          EFF_VERSION="$(./gradlew showVersion --quiet | tr -d '[:space:]')"
          echo "number=${EFF_VERSION}" >>"${GITHUB_OUTPUT}"

      - name: Cache Build Version
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: version.txt
          key: node-build-version-${{ steps.effective-version.outputs.number }}-${{ github.sha }}

  build-artifact:
    name: Build Artifact
    runs-on: [self-hosted, Linux, large, ephemeral]
    needs:
      - validate
    steps:
      - name: Install Deterministic Zip Tooling
        run: |
          echo "::group::Download Binary"
          sudo curl -L -o /usr/local/bin/deterministic-zip https://github.com/timo-reymann/deterministic-zip/releases/download/1.2.0/deterministic-zip_linux-amd64
          echo "::endgroup::"
          echo "::group::Change Binary Permissions"
          sudo chmod -v +x /usr/local/bin/deterministic-zip
          echo "::endgroup::"
          echo "::group::Show Binary Version Info"
          deterministic-zip --version
          echo "::endgroup::"

      - name: Install JSON Tools
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo "::group::Setup JQ Command"
            sudo apt update
            sudo apt install -y jq
            echo "::endgroup::"
          fi

          JQ_VERSION="$(jq --version)"
          if [[ "${JQ_VERSION}" != "jq-1.6" ]]; then
            echo "::group::Updating JQ Version"
            sudo apt update
            sudo apt upgrade -y jq
            echo "::endgroup::"
          fi

          if ! command -v tee >/dev/null 2>&1; then
            echo "::group::Setup Tee Command"
            sudo apt update
            sudo apt install -y coreutils
            echo "::endgroup::"
          fi

          echo "::group::Show JQ Version"
          jq --version
          echo "::endgroup::"

      - name: Checkout Code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 # v1.1.1
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "hedera-artifact-builds@devops-1-254919.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b # v1.1.1
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}

      - name: Setup Java
        uses: actions/setup-java@cd89f46ac9d01407894225f350157564c9c7cee2 # v3.12.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        with:
          gradle-version: ${{ inputs.gradle-version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks

      - name: Restore Build Version
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          fail-on-cache-miss: true
          path: version.txt
          key: node-build-version-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Cache Build Artifacts
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: ~/artifact-build
          key: node-build-artifacts-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Gradle Assemble
        id: gradle-build
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: assemble --scan

      - name: Gradle Version Summary
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: githubVersionSummary --scan

      - name: Stage Artifact Build Folder
        id: artifact-staging
        run: |
          BUILD_BASE_DIR="${HOME}/artifact-build"
          mkdir -p "${BUILD_BASE_DIR}/data/lib"
          mkdir -p "${BUILD_BASE_DIR}/data/apps"

          cp -f hedera-node/data/lib/*.jar "${BUILD_BASE_DIR}/data/lib"
          cp -f hedera-node/data/apps/*.jar "${BUILD_BASE_DIR}/data/apps"
          cp -f hedera-node/configuration/update/immediate.sh "${BUILD_BASE_DIR}"
          cp -f hedera-node/configuration/update/during-freeze.sh "${BUILD_BASE_DIR}"

          echo "folder=${BUILD_BASE_DIR}" >>"${GITHUB_OUTPUT}"

      - name: Write Artifact Version Descriptor
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          printf "VERSION=%s\nCOMMIT=%s\nDATE=%s" "${{ needs.validate.outputs.version }}" "${{ needs.validate.outputs.commit-id-short }}" "$(date -u)" | tee VERSION

      - name: Create Artifact Archive
        id: artifact-release
        working-directory: ${{ steps.artifact-staging.outputs.folder }}
        run: |
          POLICY="${{ inputs.version-policy }}"
          ARTIFACT_BASE_DIR="${HOME}/artifact-release"
          mkdir -p "${ARTIFACT_BASE_DIR}"

          if [[ "${POLICY}" == "branch-commit"  ]]; then
            ARTIFACT_NAME="build-${{ needs.validate.outputs.branch-name-lower }}-${{ needs.validate.outputs.commit-id-short }}"
          else
            ARTIFACT_NAME="build-v${{ needs.validate.outputs.version }}"
          fi

          ARTIFACT_FILE="${ARTIFACT_BASE_DIR}/${ARTIFACT_NAME}.zip"
          deterministic-zip -D -vr "${ARTIFACT_FILE}" *

          echo "folder=${ARTIFACT_BASE_DIR}" >>"${GITHUB_OUTPUT}"
          echo "name=${ARTIFACT_NAME}" >>"${GITHUB_OUTPUT}"
          echo "file=${ARTIFACT_FILE}" >>"${GITHUB_OUTPUT}"

      - name: Compute SHA Hash
        working-directory: ${{ steps.artifact-release.outputs.folder }}
        run: |
          ARTIFACT_NAME="${{ steps.artifact-release.outputs.name }}"
          sha384sum "${ARTIFACT_NAME}.zip" | tee "${ARTIFACT_NAME}.sha384"

      - name: Upload Artifacts (DevOps GCP Bucket)
        uses: google-github-actions/upload-cloud-storage@e95a15f226403ed658d3e65f40205649f342ba2c # v1.0.3
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          path: ${{ steps.artifact-release.outputs.folder }}
          destination: ${{ secrets.bucket-name }}
          parent: false

      - name: Notify Jenkins of Release (Integration)
        id: jenkins-integration
        uses: fjogeleit/http-request-action@eab8015483ccea148feff7b1c65f320805ddc2bf # v1.14.1
        if: ${{ inputs.dry-run-enabled != true && inputs.trigger-env-deploy == 'integration' && !cancelled() && !failure() }}
        with:
          url: ${{ secrets.jenkins-integration-url }}
          data: ${{ toJSON(github.event) }}

      - name: Display Jenkins Payload
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response || steps.jenkins-preview.outputs.response }}
        if: ${{ inputs.trigger-env-deploy == 'integration' }}
        run: |
          jq '.' <<<"${JSON_RESPONSE}"
          printf "### Jenkins Response Payload\n\`\`\`json\n%s\n\`\`\`\n" "$(jq '.' <<<"${JSON_RESPONSE}")" >>"${GITHUB_STEP_SUMMARY}"

      - name: Check for Jenkins Failures (Integration)
        if: ${{ inputs.trigger-env-deploy == 'integration' }}
        env:
          JSON_RESPONSE: ${{ steps.jenkins-integration.outputs.response }}
        run: |
          INTEGRATION_TRIGGERED="$(jq '.jobs."build-upgrade-integration".triggered' <<<"${JSON_RESPONSE}")"
          DOCKER_TRIGGERED="$(jq '.jobs."build-upgrade-integration-docker".triggered' <<<"${JSON_RESPONSE}")"

          if [[ "${INTEGRATION_TRIGGERED}" != true ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration' job via the Jenkins 'integration' pipeline!"
            exit 1
          fi

          if [[ "${DOCKER_TRIGGERED}" != true ]]; then
            echo "::error title=Jenkins Trigger Failure::Failed to trigger the 'build-upgrade-integration-docker' job via the Jenkins 'integration' pipeline!"
            exit 1
          fi

  local-node-images:
    name: Publish Local Node Images
    runs-on: [ self-hosted, Linux, large, ephemeral ]
    needs:
      - validate
      - build-artifact
    steps:
      - name: Checkout Code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 # v1.1.1
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          token_format: 'access_token'
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Set Image Registry
        id: set-registry
        run: |
         DOCKER_REGISTRY="gcr.io"
         [[ "${{ inputs.version-policy }}" == "branch-commit" ]] && DOCKER_REGISTRY="us-docker.pkg.dev"
         echo "docker-registry=${DOCKER_REGISTRY}" >>"${GITHUB_OUTPUT}"

         DOCKER_TAG_BASE="gcr.io/hedera-registry"
         if [[ "${{ inputs.version-policy }}" == "branch-commit" && "${{ inputs.dry-run-enabled }}" != true ]]; then
            DOCKER_TAG_BASE="us-docker.pkg.dev/swirlds-registry/local-node"
         else
            DOCKER_TAG_BASE="localhost:5000"
         fi

         echo "docker-tag-base=${DOCKER_TAG_BASE}" >>"${GITHUB_OUTPUT}"

      - name: Setup QEmu Support
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0
        with:
          driver-opts: network=host

      - name: Setup Local Docker Registry
        if: ${{ inputs.dry-run-enabled == true && !cancelled() && !failure() }}
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:latest

      - name: Docker Login
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          registry: ${{ steps.set-registry.outputs.docker-registry }}
          username: oauth2accesstoken
          password: ${{ steps.google-auth.outputs.access_token }}

      - name: Restore Build Artifacts
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          fail-on-cache-miss: true
          path: ~/artifact-build
          key: node-build-artifacts-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Stage SDK Artifacts
        run: |
          mkdir -p hedera-node/infrastructure/docker/containers/local-node/main-network-node/sdk
          cp -rvf ~/artifact-build/* hedera-node/infrastructure/docker/containers/local-node/main-network-node/sdk/

      - name: Build Haveged Image
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          context: hedera-node/infrastructure/docker/containers/local-node/network-node-haveged
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged:${{ needs.validate.outputs.version }}

      - name: Build Base Image
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          context: hedera-node/infrastructure/docker/containers/local-node/network-node-base
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base:${{ needs.validate.outputs.version }}

      - name: Build Network Node Image
        uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
           IMAGE_TAG=${{ needs.validate.outputs.version }}
           IMAGE_PREFIX=${{ steps.set-registry.outputs.docker-tag-base }}/
          context: hedera-node/infrastructure/docker/containers/local-node/main-network-node
          tags: ${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node:${{ needs.validate.outputs.version }}

      - name: Render Job Summary
        run: |
          NETWORK_NODE_BASE_LINK="Not Applicable"
          NETWORK_NODE_HAVEGED_LINK="Not Applicable"
          NETWORK_NODE_MAIN_LINK="Not Applicable"

          if [[ "${{ inputs.dry-run-enabled }}" != true ]]; then
            NETWORK_NODE_BASE_LINK="[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base:${{ needs.validate.outputs.version }})"
            NETWORK_NODE_HAVEGED_LINK="[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged:${{ needs.validate.outputs.version }})"
            NETWORK_NODE_MAIN_LINK="[GCP Console](https://${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node:${{ needs.validate.outputs.version }})"
          fi

          printf "### Published Docker Images\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| Image Name | Version | URL | Supported Architectures |\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| ---------- | ------- | --- | ----------------------- |\n" >> "${GITHUB_STEP_SUMMARY}"
          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/network-node-base" \
            "${{ needs.validate.outputs.version }}" \
            "${NETWORK_NODE_BASE_LINK}" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/network-node-haveged" \
            "${{ needs.validate.outputs.version }}" \
            "${NETWORK_NODE_HAVEGED_LINK}" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "| %s | %s | %s | %s |\n" \
            "${{ steps.set-registry.outputs.docker-tag-base }}/main-network-node" \
            "${{ needs.validate.outputs.version }}" \
            "${NETWORK_NODE_MAIN_LINK}" \
            "linux/amd64, linux/arm64" >> "${GITHUB_STEP_SUMMARY}"

          printf "\n\n" >> "${GITHUB_STEP_SUMMARY}"

  evm-mc-publish:
    name: Publish EVM to Maven Central
    runs-on: [ self-hosted, Linux, large, ephemeral ]
    needs:
      - validate
    steps:
      - name: Checkout Code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Install GnuPG Tools
        if: ${{ inputs.dry-run-enabled != true }}
        run: |
          if ! command -v gpg2 >/dev/null 2>&1; then
            echo "::group::Updating APT Repository Indices"
              sudo apt update
            echo "::endgroup::"
            echo "::group::Installing GnuPG Tools"
              sudo apt install -y gnupg2
            echo "::endgroup::"
          fi

      - name: Import GPG key
        id: gpg_key
        uses: crazy-max/ghaction-import-gpg@d6f3f49f3345e29369fe57596a3ca8f94c4d2ca7 # v5.4.0
        if: ${{ inputs.dry-run-enabled != true && !cancelled() && !failure() }}
        with:
          gpg_private_key: ${{ secrets.svcs-gpg-key-contents }}
          passphrase: ${{ secrets.svcs-gpg-key-passphrase }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Setup Java
        uses: actions/setup-java@cd89f46ac9d01407894225f350157564c9c7cee2 # v3.12.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        with:
          gradle-version: ${{ inputs.gradle-version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks

      - name: Restore Build Version
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          fail-on-cache-miss: true
          path: version.txt
          key: node-build-version-${{ needs.validate.outputs.version }}-${{ github.sha }}

      - name: Gradle Update Version (Snapshot)
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        if: ${{ inputs.version-policy != 'specified' && !cancelled() && !failure() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: versionAsSnapshot --scan

      - name: Gradle Assemble
        id: gradle-build
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: assemble --scan

      - name: Gradle Version Summary
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: githubVersionSummary --scan

      - name: Gradle Maven Central Release
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        if: ${{ inputs.dry-run-enabled != true && inputs.version-policy == 'specified' && !cancelled() && !failure() }}
        env:
          OSSRH_USERNAME: ${{ secrets.svcs-ossrh-username }}
          OSSRH_PASSWORD: ${{ secrets.svcs-ossrh-password }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: ":hedera-node:app-service-evm:releaseMavenCentral --scan -PpublishSigningEnabled=true"

      - name: Gradle Maven Central Snapshot
        uses: gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc # v2.8.0
        if: ${{ inputs.dry-run-enabled != true && inputs.version-policy != 'specified' && !cancelled() && !failure() }}
        env:
          OSSRH_USERNAME: ${{ secrets.svcs-ossrh-username }}
          OSSRH_PASSWORD: ${{ secrets.svcs-ossrh-password }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: ":hedera-node:app-service-evm:releaseMavenCentralSnapshot --scan -PpublishSigningEnabled=true"
